{"ast":null,"code":"import { ActionTypes } from \"@mui/base\";\nconst initializer = {\n  algorithm: 'bubble',\n  color: '#35c6ff',\n  speed: 100,\n  range: '30',\n  play: false,\n  values: [],\n  timeouts: []\n};\n\nconst updateProps = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initializer;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'UPDATE_RANGE':\n      {\n        let arr = [];\n\n        for (let i = 0; i < action.range; i++) arr.push([Math.floor(Math.random() * 100) + 1, i]);\n\n        return { ...state,\n          range: action.range,\n          values: arr\n        };\n      }\n\n    case 'UPDATE_VALUES':\n      {\n        return { ...state,\n          values: action._values\n        };\n      }\n\n    case 'UPDATE_SPEED':\n      {\n        return { ...state,\n          speed: action.speed\n        };\n      }\n\n    case 'UPDATE_COLOR':\n      {\n        return { ...state,\n          color: action.color\n        };\n      }\n\n    case 'UPDATE_ALGORITHM':\n      {\n        return { ...state,\n          algorithm: action.algorithm\n        };\n      }\n\n    case 'UPDATE_TIEMOUTS':\n      {\n        return { ...state,\n          timeouts: action._timeouts\n        };\n      }\n\n    case 'CHANGE_VALUES':\n      {\n        let arr = [],\n            range = state.range;\n\n        for (let i = 0; i < range; i++) arr.push([Math.floor(Math.random() * 100) + 1, i]);\n\n        return { ...state,\n          values: arr\n        };\n      }\n\n    case 'PLAY_PAUSE':\n      {\n        return { ...state,\n          play: action._play\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default updateProps;","map":{"version":3,"sources":["/Users/Admin/Downloads/Algorithm-main/src/reducer/updateProps.js"],"names":["ActionTypes","initializer","algorithm","color","speed","range","play","values","timeouts","updateProps","state","action","type","arr","i","push","Math","floor","random","_values","_timeouts","_play"],"mappings":"AAAA,SAASA,WAAT,QAA4B,WAA5B;AAEA,MAAMC,WAAW,GAAG;AACjBC,EAAAA,SAAS,EAAE,QADM;AAEjBC,EAAAA,KAAK,EAAE,SAFU;AAGjBC,EAAAA,KAAK,EAAE,GAHU;AAIjBC,EAAAA,KAAK,EAAE,IAJU;AAKjBC,EAAAA,IAAI,EAAE,KALW;AAMjBC,EAAAA,MAAM,EAAE,EANS;AAOjBC,EAAAA,QAAQ,EAAC;AAPQ,CAApB;;AAUA,MAAMC,WAAW,GAAG,YAA8B;AAAA,MAA7BC,KAA6B,uEAAvBT,WAAuB;AAAA,MAAXU,MAAW;;AAC/C,UAAOA,MAAM,CAACC,IAAd;AAEG,SAAK,cAAL;AAAoB;AACjB,YAAIC,GAAG,GAAC,EAAR;;AACA,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,MAAM,CAACN,KAA1B,EAAiCS,CAAC,EAAlC,EACGD,GAAG,CAACE,IAAJ,CAAS,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,IAA8B,CAA/B,EAAiCJ,CAAjC,CAAT;;AAEH,eAAO,EAAC,GAAGJ,KAAJ;AAAWL,UAAAA,KAAK,EAACM,MAAM,CAACN,KAAxB;AAA+BE,UAAAA,MAAM,EAACM;AAAtC,SAAP;AACF;;AAED,SAAK,eAAL;AAAsB;AACnB,eAAO,EAAC,GAAGH,KAAJ;AAAUH,UAAAA,MAAM,EAACI,MAAM,CAACQ;AAAxB,SAAP;AACF;;AAED,SAAK,cAAL;AAAoB;AACjB,eAAO,EAAC,GAAGT,KAAJ;AAAWN,UAAAA,KAAK,EAACO,MAAM,CAACP;AAAxB,SAAP;AACF;;AAED,SAAK,cAAL;AAAoB;AACjB,eAAO,EAAC,GAAGM,KAAJ;AAAWP,UAAAA,KAAK,EAACQ,MAAM,CAACR;AAAxB,SAAP;AACF;;AAED,SAAK,kBAAL;AAAwB;AACrB,eAAO,EAAC,GAAGO,KAAJ;AAAWR,UAAAA,SAAS,EAACS,MAAM,CAACT;AAA5B,SAAP;AACF;;AAED,SAAK,iBAAL;AAAuB;AACpB,eAAO,EAAC,GAAGQ,KAAJ;AAAWF,UAAAA,QAAQ,EAACG,MAAM,CAACS;AAA3B,SAAP;AACF;;AAED,SAAK,eAAL;AAAqB;AAClB,YAAIP,GAAG,GAAC,EAAR;AAAA,YAAWR,KAAK,GAAGK,KAAK,CAACL,KAAzB;;AACA,aAAI,IAAIS,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,KAAnB,EAA0BS,CAAC,EAA3B,EACGD,GAAG,CAACE,IAAJ,CAAS,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,IAA8B,CAA/B,EAAkCJ,CAAlC,CAAT;;AACH,eAAO,EAAC,GAAGJ,KAAJ;AAAUH,UAAAA,MAAM,EAACM;AAAjB,SAAP;AACF;;AAED,SAAK,YAAL;AAAmB;AAChB,eAAO,EAAC,GAAGH,KAAJ;AAAUJ,UAAAA,IAAI,EAACK,MAAM,CAACU;AAAtB,SAAP;AACF;;AAED;AACG,aAAOX,KAAP;AA1CN;AA4CF,CA7CD;;AA+CA,eAAeD,WAAf","sourcesContent":["import { ActionTypes } from \"@mui/base\";\r\n\r\nconst initializer = {\r\n   algorithm: 'bubble',\r\n   color: '#35c6ff',\r\n   speed: 100,\r\n   range: '30',\r\n   play: false,\r\n   values: [],\r\n   timeouts:[]\r\n};\r\n\r\nconst updateProps = (state=initializer,action) => {\r\n   switch(action.type){\r\n      \r\n      case 'UPDATE_RANGE':{\r\n         let arr=[];\r\n         for(let i = 0; i < action.range; i++)\r\n            arr.push([Math.floor(Math.random()*100)+1,i]);\r\n\r\n         return {...state, range:action.range, values:arr};\r\n      }\r\n\r\n      case 'UPDATE_VALUES': {\r\n         return {...state,values:action._values};\r\n      }\r\n\r\n      case 'UPDATE_SPEED':{\r\n         return {...state, speed:action.speed};\r\n      }\r\n\r\n      case 'UPDATE_COLOR':{\r\n         return {...state, color:action.color};\r\n      }\r\n\r\n      case 'UPDATE_ALGORITHM':{\r\n         return {...state, algorithm:action.algorithm};\r\n      }\r\n\r\n      case 'UPDATE_TIEMOUTS':{\r\n         return {...state, timeouts:action._timeouts};\r\n      }\r\n\r\n      case 'CHANGE_VALUES':{\r\n         let arr=[],range = state.range;\r\n         for(let i = 0; i < range; i++)\r\n            arr.push([Math.floor(Math.random()*100)+1, i]);\r\n         return {...state,values:arr};\r\n      }\r\n\r\n      case 'PLAY_PAUSE': {\r\n         return {...state,play:action._play};\r\n      }\r\n\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n\r\nexport default updateProps;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectionSort = () => {\n  _s();\n\n  const myState = useSelector(state => state.updateProps);\n  const dispatch = useDispatch();\n  let values = myState.values.map(item => item[0]);\n  let ids = myState.values.map(item => item[1]);\n\n  const solve = () => {\n    let n = values.length;\n\n    for (let i = 0; i < n; i++) {\n      setTimeout(() => {\n        let ind = i;\n\n        for (let j = i; j < n; j++) {\n          if (values[ind] > values[j]) ind = j;\n        }\n\n        let temp = values[i];\n        values[i] = values[ind];\n        values[ind] = temp;\n        temp = ids[i];\n        ids[i] = ids[ind];\n        ids[ind] = temp;\n        document.getElementById(ids[i]).style.transform = `translateX(${i * 11}px)`;\n        document.getElementById(ids[ind]).style.transform = `translateX(${ind * 11}px)`;\n        document.getElementById(ids[i]).childNodes[1].style.backgroundColor = 'black';\n        setTimeout(() => {\n          document.getElementById(ids[i]).childNodes[1].style.backgroundColor = myState.color;\n        }, myState.speed * 2);\n      }, i * myState.speed * 3);\n    }\n\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false\n      });\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)'\n      });\n    }, myState.speed * 3 * n + 50);\n  };\n\n  useEffect(() => {\n    if (myState.algorithm === 'selection') {\n      if (myState.play) solve();\n    }\n  }, [myState.play]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(SelectionSort, \"skz74H6TDd0rxZTKTPFjX8UUY3g=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SelectionSort;\nexport default SelectionSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectionSort\");","map":{"version":3,"sources":["/Users/Admin/Downloads/Algorithm-main/src/components/SelectionSort.js"],"names":["React","useEffect","useDispatch","useSelector","SelectionSort","myState","state","updateProps","dispatch","values","map","item","ids","solve","n","length","i","setTimeout","ind","j","temp","document","getElementById","style","transform","childNodes","backgroundColor","color","speed","type","_play","algorithm","play"],"mappings":"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","sourcesContent":["import React,{useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst SelectionSort = () =>{\r\n   const myState = useSelector(state => state.updateProps);\r\n   const dispatch = useDispatch();\r\n\r\n   let values = myState.values.map((item) => item[0]);\r\n   let ids = myState.values.map((item) => item[1]);\r\n\r\n   const solve = () => {\r\n      let n = values.length;\r\n\r\n      for(let i = 0; i < n; i++){\r\n\r\n         setTimeout(() => {\r\n         let ind = i;\r\n         for(let j = i; j < n; j++){\r\n            if(values[ind] > values[j])\r\n               ind = j;\r\n         }\r\n         let temp = values[i];\r\n         values[i] = values[ind];\r\n         values[ind] = temp;\r\n         \r\n         temp = ids[i];\r\n         ids[i] = ids[ind];\r\n         ids[ind] = temp;\r\n\r\n         document.getElementById(ids[i]).style.transform = `translateX(${i*11}px)`;\r\n         document.getElementById(ids[ind]).style.transform = `translateX(${ind*11}px)`;\r\n\r\n         document.getElementById(ids[i]).childNodes[1].style.backgroundColor = 'black';\r\n\r\n         setTimeout(() => {\r\n            document.getElementById(ids[i]).childNodes[1].style.backgroundColor = myState.color;\r\n         },myState.speed*2);\r\n\r\n         },i*myState.speed*3);\r\n      }\r\n\r\n      setTimeout(() => {\r\n         dispatch({\r\n            type:'PLAY_PAUSE',\r\n            _play:false\r\n         })\r\n\r\n         dispatch({\r\n            type:'UPDATE_COLOR',\r\n            color: 'rgb(0, 182, 0)'\r\n         })\r\n\r\n      },(myState.speed*3*n)+50);\r\n   };\r\n\r\n   useEffect(() => {\r\n      if(myState.algorithm==='selection'){\r\n         if(myState.play)\r\n            solve();\r\n      }\r\n   },[myState.play]);\r\n\r\n   return <></>;\r\n}\r\n\r\nexport default SelectionSort;"]},"metadata":{},"sourceType":"module"}
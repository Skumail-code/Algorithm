{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MergeSort = () => {\n  _s();\n\n  const myState = useSelector(state => state.updateProps);\n  const dispatch = useDispatch();\n  let values = myState.values.map(item => item[0]);\n  let ids = myState.values.map(item => item[1]);\n\n  const mergeSort = (values, ids, timer, l, r) => {\n    if (l >= r) return;\n    let mid = Math.floor((l + r) / 2);\n    mergeSort(values, ids, timer - 1, l, mid);\n    mergeSort(values, ids, timer - 1, mid + 1, r);\n    setTimeout(() => {\n      let color = [];\n\n      for (let i = 0; i < 3; i++) color.push(Math.floor(Math.random() * 200));\n\n      for (let i = l; i <= r; i++) document.getElementById(ids[i]).childNodes[1].style.backgroundColor = `rgb(${color[0]},${color[1]},${color[2]})`;\n\n      for (let i = l; i <= r; i++) {\n        for (let j = i + 1; j <= r; j++) {\n          if (values[i] > values[j]) {\n            [values[i], values[j]] = [values[j], values[i]];\n            [ids[i], ids[j]] = [ids[j], ids[i]];\n            let new_ids = [...ids];\n            document.getElementById(new_ids[i]).style.transform = `translateX(${i * 11}px)`;\n            document.getElementById(new_ids[j]).style.transform = `translateX(${j * 11}px)`;\n          }\n        }\n      }\n    }, timer * myState.speed * 5);\n  };\n\n  const solve = () => {\n    mergeSort(values, ids, Math.ceil(Math.log(values.length + 1)), 0, values.length - 1);\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false\n      });\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)'\n      });\n    }, 5 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 50);\n  };\n\n  useEffect(() => {\n    if (myState.algorithm === 'merge') {\n      if (myState.play) solve();\n    }\n  }, [myState.play]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(MergeSort, \"skz74H6TDd0rxZTKTPFjX8UUY3g=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = MergeSort;\nexport default MergeSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"MergeSort\");","map":{"version":3,"sources":["/Users/Admin/Downloads/AlgoVisuals-main/src/components/MergeSort.js"],"names":["React","useEffect","useDispatch","useSelector","MergeSort","myState","state","updateProps","dispatch","values","map","item","ids","mergeSort","timer","l","r","mid","Math","floor","setTimeout","color","i","push","random","document","getElementById","childNodes","style","backgroundColor","j","new_ids","transform","speed","solve","ceil","log","length","type","_play","algorithm","play"],"mappings":"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","sourcesContent":["import React,{useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst MergeSort = () => {\r\n   const myState = useSelector(state => state.updateProps);\r\n   const dispatch = useDispatch();\r\n\r\n   let values = myState.values.map((item) => item[0]);\r\n   let ids = myState.values.map((item) => item[1]);\r\n\r\n   const mergeSort = (values,ids,timer,l,r) => {\r\n      if(l >= r)\r\n         return;\r\n\r\n      let mid = Math.floor((l+r)/2);\r\n\r\n      mergeSort(values,ids,timer-1,l,mid);\r\n      mergeSort(values,ids,timer-1,mid+1,r);\r\n\r\n      setTimeout(() => {\r\n         let color = [];\r\n         for(let i = 0; i < 3; i++)\r\n            color.push(Math.floor(Math.random()*200));\r\n   \r\n         for(let i = l; i <= r; i++)\r\n            document.getElementById(ids[i]).childNodes[1].style.backgroundColor = `rgb(${color[0]},${color[1]},${color[2]})`;\r\n\r\n         for(let i = l; i <= r; i++){\r\n         for(let j = i+1; j <= r; j++){\r\n\r\n            if(values[i]>values[j]){\r\n               [values[i],values[j]] = [values[j],values[i]];\r\n               [ids[i],ids[j]] = [ids[j],ids[i]];\r\n               \r\n               let new_ids = [...ids];\r\n\r\n               document.getElementById(new_ids[i]).style.transform = `translateX(${i*11}px)`;\r\n               document.getElementById(new_ids[j]).style.transform = `translateX(${j*11}px)`;\r\n               }\r\n            }\r\n         }\r\n      },timer*myState.speed*5);\r\n   }\r\n\r\n   const solve = () => {\r\n      mergeSort(values,ids,Math.ceil(Math.log(values.length+1)),0,values.length-1);\r\n\r\n      setTimeout(() => {\r\n         dispatch({\r\n            type:'PLAY_PAUSE',\r\n            _play:false\r\n         })\r\n\r\n         dispatch({\r\n            type:'UPDATE_COLOR',\r\n            color: 'rgb(0, 182, 0)'\r\n         })\r\n      },5*myState.speed*(1+Math.ceil(Math.log(values.length+1)))+50);\r\n   };\r\n\r\n   useEffect(() => {\r\n      if(myState.algorithm==='merge'){\r\n         if(myState.play)\r\n            solve();\r\n      }\r\n   },[myState.play]);\r\n\r\n   return <></>;\r\n}\r\n\r\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}